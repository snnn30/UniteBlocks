@startuml hoge

namespace Utilitiy{
    class ChainGauge{
        +float Value
        +float MaxValue
    }
    class CircleGauge{
        +float Value
    }
    class TextBlink
    class UIShake
}

namespace UniteBlocks{
    namespace Game{
        class GameManager{
            {static} +GameManager Instance
            +bool IsGaugeIncreasing
            +IObservable<Unit> OnGameOver
        }
        class StartUI{
            +void SetVisilityPressAnyKey(bool visible)
        }
        class CountDownUI{
            +UniTask CountDown()
        }

        GameManager --> StartUI
        GameManager --> CountDownUI
    }

    namespace Setting{
        class BlockColorTable<<ScriptableObject>>{
            +List<Color> Colors
        }

        class PlayerSetting<<ScriptableObject>>{
            +float AutoDropDelay
            +float ManualDropDelay
            +float StagnationTime
            +float MoveDelay
            +float RotateDelay
        }
        class BombGaugeSetting<<ScriptableObject>>{
            +float IncreasePerSec
            +float BoostRatio
        }
        class PointSetting<<ScriptableObject>>{
            +int PointPerTile
        }
        class DistanceSetting<<ScriptableObject>>{
            +float DecreasePerSecond
            +int InitialValue
            +float TimeToReach
            +float Acceleration
            +float ReflexTime
            +float ReflexTimeScale
        }
    }





    namespace Score{
        class ScoreData{
            +int Value
            +UniTask SetValue(int targetValue, float seconds, float scale, Ease ease)
            +SetVisible(bool visible)
        }
        class ScoreManager{
            +UniTask AddScoreAddition(int value)
            +UniTask AddScoreMultiplication(int value)
            +void SetVisible(bool visible)
            +UniTask ResolveAddition()
            +UniTask ResolveMultiplication()
        }
        class DistanceManager{
            +float Value
            +void ResetPostProcess()
        }
        class DistanceUI{
            +int Threshold
            +int Value
        }    
        class ResultUI{
            +int HightScore
            +int CurrentScore
            +void SetVisilityPressAnyKey(bool visible)
        }

        DistanceManager --> DistanceUI
        ScoreManager ---> ScoreData
        ScoreManager --> DistanceManager
        ScoreManager --> ResultUI
    }

    namespace Items{
        class Block{
            +Color Color
            +Vector2Int Shape
        }
        class Bomb
        interface Item

        Item <|-- Bomb
        Item <|-- Block
    }

    namespace Board{
        class PlayerController
        class WaitingBomb{
            +bool IsActive
            +bool IsBoosting
            +void UseGauge()
        }
        class WaitingItems{
            +(Item[] items, bool isBomb) GetNextItems()
        }
        class BoardController{
            {static} +Vector2Int START_POS
            +bool CanSettle(Vector2Int pos, Vector2Int shape)
            +void Settle(Vector2Int pos, Block block)
            +UniTask<bool> DropToBottom()
            +UniTask Explode(Vector2Int pos)
        }

        PlayerController ---> BoardController
        PlayerController --> WaitingItems
        PlayerController --> WaitingBomb
        WaitingItems --> WaitingBomb
    }



    BoardController ---> ScoreManager
    BoardController ---> Block
    WaitingItems ---> Item
    PlayerController --> Item
    


}

@enduml