@startuml hoge

namespace Player{
    class PlayerRotate
    class PlayerMove
    class PlayerDrop
    class PlayerState{
        +Vector2Int Position
        +Direction Rotation    
        +bool IsAcceptingInput
        +List<Tween> ActiveTweens
        +Item[] Items
        +bool IsBomb
        +void GroundingProcess()
        +bool CanSet(Vector2Int pos, Directoin rot)
    }
    enum Direction

    PlayerDrop --> PlayerState
    PlayerRotate --> PlayerState
    PlayerMove --> PlayerState
    PlayerRotate ..> Direction
    PlayerState *- Direction
}

namespace Items{
    interface Item
    class Bomb
    class Puyo{
        +PuyoType : PuyoType
    }
    class PuyoCollerTable{
        +SerializableDictionary<PuyoType, Color> PuyoColooers
    }
    enum PuyoType

    Item <|-- Puyo
    Item <|-- Bomb
    Puyo --> PuyoCollerTable
    Puyo --> PuyoType
    PuyoCollerTable --> PuyoType
}

namespace Utility{
    class SerializableDictionary
}

namespace Manager{
    class GameManager{
        +void OnGameOver()
    }
}


namespace Board{
    class WaitingBomb{
        +bool IsActive
        +int Count
    }

    class WatingItems{
        +(Item[] items, bool isBomb) GetNextPuyos()
    }

    class BoardController{
        {static} +Vector2Int START_POS
        +bool CanSettle(Vector2Int pos) 
        +bool Settle(Vector2Int pos, PuyoType puyoType)
        +bool DropToBottom()
    }

    WaitingBomb <- WatingItems 
}



PuyoCollerTable --> SerializableDictionary

PlayerState --> Item
PlayerState --> BoardController
PlayerState --> WatingItems

WatingItems --> Item
BoardController --> Puyo
BoardController --> GameManager


@enduml